#    RISC-V rv32 tutorial examples
#
#    Copyright (C) 2021 John Winans
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.
#


# 20210505 jrw

##############################################################
# Run like this:

qemu-system-riscv32 -machine virt -m 128M -bios none -device loader,file=./prog -nographic -s


##############################################################
# To stop qemu: ^A x



*** Notes:

The compiler generatedthis to read the mtime register:

800000d0:       80014cb7                lui     x25,0x80014
800000d4:       ff8d2403                lw      x8,-8(x26) # 0x200bff8 <_start-0x7dff4008>
800000d8:       ffcd2483                lw      x9,-4(x26)


The optimization on getting a base address into x25 is interesting.  The lui
can onlu load values with the bottom 12 bits set to zero.  So the compiler pointed 
it past the target and then used a negative offset in the lw insns!


*** Problem:

What if the timer advanced from 0x00000000ffffffff to 0x0000000100000000 between the two
lui instructions?  We'd end up with 0xffffffff in x8 and 0x01 in x9!!!

If the mtime counter is running at 10MHz, this could happen about once every 8 minutes.

To get around this problem, we SHOULD read the mtime register like this:

	uint32_t mtime_hi1;
	uint32_t mtime_lo;
	uint32_t mtime_hi2;
	do
	{
		mtime_hi1 = CLINT0.mtime_hi;
		mtime_lo = CLINT0.mtime_lo;
		mtime_hi2 = CLINT0.mtime_hi;
	}
	while (mtime_hi1 != mtime_hi2);




Doing so and building with -O2 now generates code that looks like this:


800000d0:       80014d37                lui     x26,0x80014
800000d4:       0ac0006f                jal     x0,0x80000180 <main+0x144>
800000d8: ...

80000180:       ffc42783                lw      x15,-4(x8) # 0x200bffc <_start-0x7dff4004>
80000184:       ff842903                lw      x18,-8(x8)
80000188:       ffc42483                lw      x9,-4(x8)
8000018c:       fe979ae3                bne     x15,x9,0x80000180 <main+0x144>
80000190:       f49ff06f                jal     x0,0x800000d8 <main+0x9c>




*** Yeah... but what if the mtime overflows?

Keep in mind that mtime is a free-running counter that starts at
zero and runs until the clint is reset.

Running at 10MHz, mtime will overflow once every:

2^64 = 18446744073709551616
18446744073709551616/10000000 = 1844674407370.9551616 seconds
1844674407370.9551616/60 = 30744573456.1825860 minutes
30744573456.1825860/60 = 512409557.6030431 hours
512409557.6030431/24 = 21350398.2334601 days
21350398.2334601/365 = 58494.2417355 years (approximately)

Therefore, as long as one remembers to reset/reboot once every
58,000 years or so....


What about using this in a system that travels through warped spacetime?

Then a) run the mtime clock at 32767Hz (a very common real-time clock 
rate) and buy yourself up to 17851570.7069634 years before an overflow 
and/or b) keep track of the prior/last time each time you read it
and keep track of the number overflows and integrate them into a 128-bit
count value.  Ofcourse, at 10MHz, you'd have to make sure that you read 
the mtime value at least once every 58,000 years.
